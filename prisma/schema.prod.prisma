// This is your Prisma schema file for production (PostgreSQL),
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password_hash String
  role          Role     @default(USER)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  orders   Order[]
  coupons  Coupon[]  @relation("CouponBuyer")

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id               String    @id @default(cuid())
  title            String
  description      String
  price_cents      Int
  stock            Int       @default(0)
  images           String    // JSON string para armazenar array de imagens
  active           Boolean   @default(true)
  category_id      String?
  is_auction       Boolean   @default(false)
  auction_date     DateTime?
  auction_end_date DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  // Relations
  category    Category?   @relation(fields: [category_id], references: [id])
  order_items OrderItem[]

  @@map("products")
}

model Order {
  id             String      @id @default(cuid())
  user_id        String
  total_cents    Int
  discount_cents Int         @default(0)
  final_cents    Int
  status         OrderStatus @default(PENDING)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  // Relations
  user         User        @relation(fields: [user_id], references: [id])
  order_items  OrderItem[]
  payments     Payment[]
  used_coupons Coupon[]    @relation("CouponUsedInOrder")

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id          String @id @default(cuid())
  order_id    String
  product_id  String
  quantity    Int
  price_cents Int

  // Relations
  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  order_id      String?
  coupon_id     String?       @unique
  mp_payment_id String?
  amount_cents  Int
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  // Relations
  order  Order?  @relation(fields: [order_id], references: [id])
  coupon Coupon? @relation(fields: [coupon_id], references: [id])

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
}

enum CouponStatus {
  AVAILABLE
  USED
  EXPIRED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  DEBIT_CARD
}

model Coupon {
  id                String       @id @default(cuid())
  code              String       @unique
  face_value_cents  Int
  sale_price_cents  Int
  buyer_id          String?
  status            CouponStatus @default(AVAILABLE)
  expires_at        DateTime
  used_at           DateTime?
  used_in_order_id  String?
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  // Relations
  buyer          User?     @relation("CouponBuyer", fields: [buyer_id], references: [id])
  used_in_order  Order?    @relation("CouponUsedInOrder", fields: [used_in_order_id], references: [id])
  payment        Payment?

  @@map("coupons")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}