// This is your Prisma schema file for production (PostgreSQL),
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password_hash String
  role          Role     @default(USER)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  orders   Order[]
  coupons  Coupon[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id           String   @id @default(cuid())
  title        String
  description  String
  price_cents  Int
  stock        Int      @default(0)
  images       String   // JSON string para armazenar array de imagens
  active       Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  order_items OrderItem[]

  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  user_id     String
  total_cents Int
  status      OrderStatus @default(PENDING)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  // Relations
  user         User        @relation(fields: [user_id], references: [id])
  order_items  OrderItem[]
  payments     Payment[]
  used_coupons Coupon[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id          String @id @default(cuid())
  order_id    String
  product_id  String
  quantity    Int
  price_cents Int

  // Relations
  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("order_items")
}

model Payment {
  id                String        @id @default(cuid())
  order_id          String
  amount_cents      Int
  status            PaymentStatus @default(PENDING)
  payment_method    String
  external_id       String?       // ID do Mercado Pago
  external_response String?       @db.Text // Resposta completa do gateway
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [order_id], references: [id])

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
}

model Coupon {
  id                String    @id @default(cuid())
  code              String    @unique
  face_value_cents  Int       // Valor de face do cupom
  sale_price_cents  Int       // Preço de venda do cupom
  buyer_id          String?   // Quem comprou o cupom
  used_by_id        String?   // Quem usou o cupom
  used_at           DateTime? // Quando foi usado
  expires_at        DateTime  // Data de expiração
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  buyer    User?  @relation("CouponBuyer", fields: [buyer_id], references: [id])
  used_by  User?  @relation("CouponUser", fields: [used_by_id], references: [id])
  orders   Order[]

  @@map("coupons")
}