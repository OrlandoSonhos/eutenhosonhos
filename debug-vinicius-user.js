require('dotenv').config();
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugViniciusUser() {
  const viniciusEmail = 'vini_deiro@icloud.com';
  const paymentId = '130131909361';
  const webhookTime = new Date('2025-10-21T01:44:31.000-04:00'); // Hor√°rio do webhook
  
  console.log('üîç INVESTIGANDO USU√ÅRIO VINICIUS DEIR√ì');
  console.log('E-mail:', viniciusEmail);
  console.log('Webhook em:', webhookTime.toISOString());
  
  try {
    // 1. Verificar se o usu√°rio existe
    console.log('\nüë§ VERIFICANDO USU√ÅRIO NO BANCO...');
    const user = await prisma.user.findUnique({
      where: { email: viniciusEmail }
    });
    
    if (user) {
      console.log('‚úÖ USU√ÅRIO ENCONTRADO:');
      console.log('   ID:', user.id);
      console.log('   Nome:', user.name);
      console.log('   E-mail:', user.email);
      console.log('   Criado em:', user.created_at);
      console.log('   Atualizado em:', user.updated_at);
      console.log('   Role:', user.role);
    } else {
      console.log('‚ùå USU√ÅRIO N√ÉO ENCONTRADO!');
      console.log('   E-mail procurado:', viniciusEmail);
      return;
    }
    
    // 2. Verificar sess√µes do usu√°rio
    console.log('\nüîê VERIFICANDO SESS√ïES DO USU√ÅRIO...');
    const allSessions = await prisma.session.findMany({
      where: { userId: user.id },
      orderBy: { expires: 'desc' }
    });
    
    console.log(`üìä Total de sess√µes: ${allSessions.length}`);
    
    if (allSessions.length > 0) {
      console.log('\nüìã √öLTIMAS 5 SESS√ïES:');
      allSessions.slice(0, 5).forEach((session, i) => {
        const isActive = session.expires > new Date();
        const wasActiveAtWebhook = session.expires > webhookTime;
        console.log(`   ${i+1}. Token: ${session.sessionToken.substring(0, 20)}...`);
        console.log(`      Expira: ${session.expires.toISOString()}`);
        console.log(`      Status atual: ${isActive ? '‚úÖ ATIVA' : '‚ùå EXPIRADA'}`);
        console.log(`      No momento do webhook: ${wasActiveAtWebhook ? '‚úÖ ATIVA' : '‚ùå EXPIRADA'}`);
        console.log('');
      });
      
      // Verificar se havia sess√£o ativa no momento do webhook
      const activeAtWebhook = allSessions.filter(s => s.expires > webhookTime);
      console.log(`üéØ SESS√ïES ATIVAS NO MOMENTO DO WEBHOOK: ${activeAtWebhook.length}`);
      
      if (activeAtWebhook.length > 0) {
        console.log('‚úÖ VOC√ä ESTAVA LOGADO NO MOMENTO DO WEBHOOK!');
        activeAtWebhook.forEach((session, i) => {
          console.log(`   ${i+1}. Expira: ${session.expires.toISOString()}`);
        });
      } else {
        console.log('‚ùå NENHUMA SESS√ÉO ATIVA NO MOMENTO DO WEBHOOK');
      }
    } else {
      console.log('‚ùå NENHUMA SESS√ÉO ENCONTRADA PARA O USU√ÅRIO');
    }
    
    // 3. Verificar dados do pagamento MP
    console.log('\nüí≥ VERIFICANDO DADOS DO PAGAMENTO MP...');
    const response = await fetch(`https://api.mercadopago.com/v1/payments/${paymentId}`, {
      headers: {
        'Authorization': `Bearer ${process.env.MP_ACCESS_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    const payment = await response.json();
    const payerEmail = payment.payer?.email;
    
    console.log('E-mail do pagador MP:', payerEmail);
    console.log('E-mail do usu√°rio logado:', viniciusEmail);
    console.log('E-mails coincidem?', payerEmail === viniciusEmail ? '‚úÖ SIM' : '‚ùå N√ÉO');
    
    // 4. Verificar cupom criado
    console.log('\nüé´ VERIFICANDO CUPOM CRIADO...');
    const coupon = await prisma.coupon.findUnique({
      where: { code: 'LR8OVFBV' }
    });
    
    if (coupon) {
      console.log('‚úÖ CUPOM ENCONTRADO:');
      console.log('   C√≥digo:', coupon.code);
      console.log('   Comprador ID:', coupon.buyer_id || 'N√ÉO ASSOCIADO');
      console.log('   Status:', coupon.status);
      console.log('   Criado em:', coupon.created_at);
      
      if (coupon.buyer_id === user.id) {
        console.log('‚úÖ CUPOM ASSOCIADO AO SEU USU√ÅRIO');
      } else if (coupon.buyer_id) {
        console.log('‚ùå CUPOM ASSOCIADO A OUTRO USU√ÅRIO:', coupon.buyer_id);
      } else {
        console.log('‚ö†Ô∏è CUPOM N√ÉO ASSOCIADO A NENHUM USU√ÅRIO');
      }
    } else {
      console.log('‚ùå CUPOM N√ÉO ENCONTRADO');
    }
    
    // 5. An√°lise do problema
    console.log('\nüîç AN√ÅLISE DO PROBLEMA:');
    
    if (payerEmail !== viniciusEmail) {
      console.log('‚ùå PROBLEMA 1: E-mail do pagador MP diferente do seu e-mail');
      console.log(`   MP: ${payerEmail}`);
      console.log(`   Seu: ${viniciusEmail}`);
      console.log('   Isso explica por que n√£o encontrou pelo e-mail do pagador');
    } else {
      console.log('‚úÖ E-mail do pagador MP coincide com o seu');
    }
    
    const activeAtWebhook = allSessions.filter(s => s.expires > webhookTime);
    if (activeAtWebhook.length === 0) {
      console.log('‚ùå PROBLEMA 2: Nenhuma sess√£o ativa no momento do webhook');
      console.log('   Isso explica por que n√£o encontrou por sess√£o ativa');
    } else {
      console.log('‚úÖ Havia sess√£o ativa no momento do webhook');
    }
    
    console.log('\nüí° CONCLUS√ÉO:');
    if (payerEmail !== viniciusEmail && activeAtWebhook.length === 0) {
      console.log('‚ùå DUPLO PROBLEMA: E-mail diferente E sem sess√£o ativa');
    } else if (payerEmail !== viniciusEmail) {
      console.log('‚ö†Ô∏è E-mail diferente, mas deveria ter encontrado por sess√£o ativa');
      console.log('   Poss√≠vel bug na l√≥gica de busca por sess√£o');
    } else if (activeAtWebhook.length === 0) {
      console.log('‚ö†Ô∏è E-mail correto, mas sem sess√£o ativa');
      console.log('   Deveria ter encontrado pelo e-mail do pagador');
    } else {
      console.log('ü§î E-mail correto E sess√£o ativa - bug na l√≥gica!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

debugViniciusUser();